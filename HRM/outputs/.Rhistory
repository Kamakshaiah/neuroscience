with(sedata, mean
)
with(sedata, xtabs(~gender, ...))
with(sedata, xtabs(~gender,))
sapply(sedata, xtabs(~gender,))
with(sedata, xtabs(~gender+education,))
with(sedata, xtabs(~gender+education+family,))
prop.table(ftable(xtabs(salary ~ family + gender + education, sedata))
)
help(prop.table)
margin.table(ftable(xtabs(salary ~ family + gender + education, sedata)))
xtabs(~ family + gender, sedata)
prop.table(xtabs(~ family + gender, sedata))
7/11
7/20
dim(sedata)
7/30
names(UCBAdmissions)
class(UCBAdmissions)
UCBAdmissions
data.frame(UCBAdmissions)
xtabs(~ family + gender, sedata)
data.frame(xtabs(~ family + gender, sedata))
xtabs(~ family + gender + education, sedata))
xtabs(~ family + gender + education, sedata)
data.frame(xtabs(~ family + gender + education, sedata))
sample(data.frame(xtabs(~ family + gender + education, sedata)))
sample(data.frame(xtabs(~ family + gender + education, sedata))$gender)
data.frame(xtabs(~ family + gender + education, sedata))
ftable(xtabs(~ family + gender + education, sedata))
data.frame(ftable(xtabs(~ family + gender + education, sedata)))
m <- matrix(1:4, 2)
m
proportions(m)
prop.table(m)
proportions(m, 1)
proportions(m, 2)
xtabs(~ gender + salary, sedata)
xtabs(~ gender + education, sedata)
tbl <- xtabs(~ gender + education, sedata)
proportions(tbl, 1)
tbl
prop.table(tbl, 1)
prop.table(tbl, 2)
ftable(prop.table(tbl, 2))
data.frame(ftable(prop.table(tbl, 2)))
xtabs(salary ~ gender )
xtabs(salary ~ gender, sedata )
proportions(xtabs(salary ~ gender, sedata ))
summary(proportions(xtabs(salary ~ gender, sedata )))
data.frame(proportions(xtabs(salary ~ gender, sedata ))))
data.frame(proportions(xtabs(salary ~ gender, sedata )))
proportions(xtabs(salary ~ gender + education, sedata ))
data.frame(proportions(xtabs(salary ~ gender + education, sedata )))
tbl
cumsum(tbl)
summary(tbl)
chisq.test(tbl)
tbl
help('repeat')
rep(1, 10)
x <- 1
repeat {
print(x)
if (x > 4){
break
}
x <- x + 1
}
for(i in 1:10){
print(i)
}
x <- 1
while(x <=4){
print(x)
x <- x + 1
}
rep(1, 10)
rep(rnorm(1), 10)
rep(round(rnorm(1)), 10)
matrix(c(rep(0, 3), rep(rnorm(1), 3), rep(0, 3)), 9, 1)
matrix(c(rep(0, 3), rep(round(rnorm(1)), 3), rep(0, 3)), 9, 1)
matrix(1:16, 4, 4)
mat <- matrix(1:16, 4, 4)
det(mat)
mat1 <- matrix(rnorm(16), 4, 4)
det(mat1)
mat1 <- matrix(rnorm(16), 4, 4)
det(mat1)
cov(mat1)
eigen(mat1)
det(mat1)
matrix(1, 4, 4)
ones <- matrix(1, 4, 1)
ones %*% mat1 %*% t(ones)
ones %*% mat1
ones
ones <- matrix(1, 1, 4)
ones %*% mat1
ones %*% mat1 %*% t(ones)
det(mat1)
eigen(mat1)
eigen(mat1)$values
diag()
diag(4)
mat1 %*% diag(4) t(mat1)
mat1 %*% diag(4) %*% t(mat1)
mat1
cov(mat1)
var(mat1)
is(1 > 2)
is(1)
is(matrix(1:4, 1, 4))
-1 > 0
eigen(mat1) > 0
sapply(eigen(mat1)$values, function(x) x > 0)
eigen(mat1)$values
eigen(mat1)$values > 0
with(eigen(mat1)$values, >0)
with(eigen(mat1)$values, >)
eigen(mat1)$values
apply(eigen(mat1)$values, 1, `>`)
apply(eigen(mat1)$values, 2, `>`)
em <- eigen(mat1)$values
for (i in em){i < 0}
for (i in em){print(i < 0)}
em <- eigen(mat1)$values
em
typeof(em)
A <- matrix(c(13, -4, 2, -4, 11, -2, 2, -2, 8), 3, 3, byrow=TRUE)
A
ev <- eigen(A)
ev
vectors <- ev$vectors
crossprod(vectors)
zapsmall(crossprod(vectors))
A %*% diag(3) %*% t(A)
A
A %*% t(A)
R(A)
values <- ev$values
sum(values)
sum(values != 0)
em <- eigen(mat1)$values
em
em != 0
sum(em != 0)
gender <- sample(c('male', 'female'), 30, replace = T)
education <- sample(c('educated', 'uneducated'), 30, replace = T)
family <- sample(c('nuclear', 'combined'), 30, replace = T)
tbl <- table(gender)
tbl
chisq.test(tbl)
chisq.test(table(gender, education))
chisq.test(table(gender, family))
chisq.test(table(education, family))
chisq.test(table(education, family, gender))
summary(table(education, family, gender))
sed <- data.frame(gender = gender, education = education, family = family)
head(sed)
dim(sed)
xtabs(~gender+education, sed)
summary(tbl)
tbl
tbl <- xtabs(~gender+education, sed)
tbl
summary(tbl)
ftable(tbl)
data.frame(ftable(tbl))
help("read.csv")
spotify <- read.table("D://Work//R//r-lab//R-Lab//course_work//data//dataset.csv", nrows = 30)
spotify <- read.table("D://Work//R//r-lab//R-Lab//course_work//data//dataset.csv", header = TRUE, nrows = 30)
spotify <- read.csv("D://Work//R//r-lab//R-Lab//course_work//data//dataset.csv", header = TRUE, nrows = 30)
dim(spotify)
names(spotify)
length(names(spotify))
spotify$popularity
t.test(spotify$popularity)
install.packages('data.table')
library(data.table)
path <- readline()
path
pathch <- gsub('\\\\', '/', path)
pathch
pathch <- gsub('\\\\', '//', path)
pathch
filepath <- file.path(pathch, 'dataset.csv')
popularity <- fread(filepath, select = c('popularity'))
popularity
length(popularity)
length(popularity)
class(popularity)
head(popularity)
with(popularity, c(mean, sd))
sapply(popularity, mean))
sapply(popularity, mean)
sapply(popularity, c(mean, sd))
sapply(popularity, function(x) c(mean(x), sd(d)))
sapply(popularity, function(x) c(mean(x), sd(x)))
mean(popularity)
mean(popularity, na.rm = T)
# sapply(popularity, function(x) c(mean(x), sd(x)))
is.numeric(popularity)
# sapply(popularity, function(x) c(mean(x), sd(x)))
poplrty <- as.numeric(popularity)
# sapply(popularity, function(x) c(mean(x), sd(x)))
poplrty <- numeric(popularity)
# sapply(popularity, function(x) c(mean(x), sd(x)))
poplrty <- sapply(popularity, numeric)
# sapply(popularity, function(x) c(mean(x), sd(x)))
poplrty <- sapply(popularity, function(x) as.numeric(x))
mean(poplrty)
c(mean(poplrty), sd(poplrty))
t.test(poplrty)
filepath <- file.path(pathch, 'hotel-reviews-la_all.csv')
reviews <- fread(filepath, select = c('Overal score'))
reviews <- fread(filepath, select = c('Score'))
reviews
mean(reviews)
sapply(reviews, c(mean, sd))
sapply(reviews, function(x) c(mean(x), sd(x)))
t.test(reviews)
library(shiny); runApp('D:/Work/R/r-lab/R-Lab/Shiny_Apps/marketing-analytics/MAA_Dash.R')
convertPath()
# convert path
# D:\Research\PAPERS\finance\cryptocurrency
if (!"tm" %in% installed.packages()){
install.packages("tm")
} else{
print('the package is already installed!')
}
library(tm)
print("loaded 'tm' package")
preps <- c('in', 'on', 'the', 'The', 'this', 'This', 'with', 'and', 'And', 'be', 'Be', 'of', 'would', 'could', 'under', 'Under', 'above', 'Above', 'Below', 'below', 'is', 'was', 'being', 'Being', 'to', 'To', 'With', 'which', 'Which', 'shall', 'Shall', 'On', 'not', 'Not', 'None', 'none', 'made', 'Made', 'Make', 'make', 'it', 'its', 'It', 'has', 'Has', 'from', 'From', 'For', 'for', 'been', 'Been', 'Being', 'being', 'a', 'A', 'as', 'As', 'can', 'could', 'Can', 'Could', 'using', 'Using', 'many', 'Many', 'also', 'Also', 'use', 'Use', 'used', 'Used')
convertPath <- function(){
path <- readline() # paste the path
pathch <- gsub('\\\\', '/', path)
return(pathch)
}
# convertPath()
filePath <- function(path, filename){
return(file.path(path, filename))
}
# filepath <- filePath(getwd(), "cryptocurrency-and-healthcare-scopus.csv")
importDataFile <- function(filepath){
dfile <- read.csv(filepath)
print(names(dfile))
return(dfile)
}
# datafile <- importDataFile(filepath)
# class(datafile)
# names(datafile)
makeAbstracts <- function(datafile){
abs <- datafile['Abstract']
cat(class(abs), 'with', dim(abs)[1], 'rows and', dim(abs)[2], 'columns were',  'created')
return(abs)
}
# abs <- makeAbstracts(datafile)
# class(abs) # first abstract
# dim(abs)
# abs[1, ]
# strsplit(abs[1, ], ' ')
# table(abs[1, ])
convertAbstractToDataSet <- function(abstract){
return(data.frame(table(strsplit(abstract, ' '))))
}
# dvector <- convertAbstractToDataSet(abs[1, ])
# names(dvector)
# subset(dvector, Freq > 1)
cleanData <- function(data_, th=NULL){
return(subset(data_, Freq > th & !data_$Var1 %in% preps))
}
# cdata <- cleanData(dvector, th=1)
plotDataSet <- function(dset){
plot(dset); text(dset, labels = dset[, 1])
}
# plotDataSet(cdata)
# abscorp <- VCorpus((VectorSource(t(abs))))
makeCorpus <- function(abs){
corp_ <- VCorpus((VectorSource(t(abs))))
print(corp_)
return(corp_)
}
# corpusout <- makeCorpus(abs)
#
# corp_ <- tm_map(abscorp, stripWhitespace)
# corp_ <- tm_map(corp_, content_transformer(tolower))
# corp_ <- tm_map(corp_, removeWords, stopwords("english"))
# corp_ <- tm_map(corp_, removeNumbers)
# corp_ <- tm_map(corp_, removePunctuation)
# adtm <- DocumentTermMatrix(corp_)
# dim(adtm)
# tm::inspect(adtm[210:215, ])
#
# adf <- data.frame(as.matrix(adtm))
# class(adf)
# dim(adf)
# names(adf)
# head(adf)[, 1:3]
# adf[, 'context']
cleanCorpusAndMakeDF <- function(corpus, DF=FALSE, sparcity = NULL){
abscorp <- VCorpus((VectorSource(t(corpus))))
corp_ <- tm_map(abscorp, stripWhitespace)
corp_ <- tm_map(corp_, content_transformer(tolower))
corp_ <- tm_map(corp_, removeWords, stopwords("english"))
corp_ <- tm_map(corp_, removeNumbers)
corp_ <- tm_map(corp_, removePunctuation)
adtm <- DocumentTermMatrix(corp_)
if (DF & !is.null(sparcity)){
dataframe <- data.frame(as.matrix(removeSparseTerms(adtm, sparcity)))
return(dataframe)
print(dim(dataframe))
} else {
dataframe <- data.frame(as.matrix(adtm))
return(dataframe)
}
}
# dataframe <- cleanCorpusAndMakeDF(abs, DF=T)
# dim(dataframe)
# names(dataframe[, 71:75])
# dataframe_ <- dataframe[, 71:dim(dataframe)[2]]
# dim(dataframe_)
# head(dataframe_[, 4820:4824])
# https://stackoverflow.com/questions/9856632/subset-rows-with-1-all-and-2-any-columns-larger-than-a-specific-value
# subset(dataframe_, )
removePreps <- function(dataframe, preps){
names_ <- !names(dataframe) %in% preps
dataframe_ <- dataframe[, names_]
return(dataframe_)
}
# dataframe_new <- removePreps(dataframe, c('can', 'many', 'also', 'used', 'using'))
# head(dataframe_new)
# names(dataframe_new)
convertPath()
path <- convertPath()
source("D:/Research/PAPERS/Neuro/R/sripts/nero-marketing-science.R", echo=TRUE)
path
filepath <- filePath(path, 'neromarketing-applications.csv')
datafile <- importDataFile(filepath)
abs <- makeAbstracts(datafile)
neurodf <- cleanCorpusAndMakeDF(abs, DF=T, sparcity = 1)
neurodf <- cleanCorpusAndMakeDF(abs, DF=T, sparcity = 0.999)
names(neurodf)
grep('market', names(neurodf))
names(neurodf)[grep('market', names(neurodf))]
dim(neurodf)
length(names(neurodf))
length(names(neurodf)[grep('market', names(neurodf))])
head(neurodf)[, 1:5]
names(neurodf)
names(neurodf)[1:50]
names(neurodf)[50:100]
neurodf_ <- neurodf[50:5783, ]
dim(neurodf_)
dim(neurodf)
neurodf_ <- neurodf[, 50:5783]
dim(neurodf_)
length(names(neurodf_)[grep('market', names(neurodf_))]) # 26
names(neurodf)
length(names(neurodf_)[grep('sale', names(neurodf_))]) # 24
names(neurodf_)[grep('sale', names(neurodf_))]
length(names(neurodf_)[grep('hrm', names(neurodf_))]) # 3
length(names(neurodf_)[grep('human', names(neurodf_))]) # 3
names(neurodf_)[grep('human', names(neurodf_))
names(neurodf_)[grep('human', names(neurodf_))]
names(neurodf_)[grep('human', names(neurodf_))]
length(names(neurodf_)[grep('resource', names(neurodf_))]) # 3
names(neurodf_)[grep('resource', names(neurodf_))]
length(names(neurodf_)[grep('management', names(neurodf_))]) # 3
length(names(neurodf_)[grep('finance', names(neurodf_))]) # 3
names(neurodf_)[grep('finance', names(neurodf_))]
length(names(neurodf_)[grep('financ', names(neurodf_))]) # 3
names(neurodf_)[grep('financ', names(neurodf_))]
length(names(neurodf_)[grep('advertise', names(neurodf_))]) # 2
names(neurodf_)[grep('advertise', names(neurodf_))]
length(names(neurodf_)[grep('promotion', names(neurodf_))]) # 3
names(neurodf_)[grep('promotion', names(neurodf_))]
length(names(neurodf_)[grep('human', names(neurodf_))]) # 3
length(names(neurodf_)[grep('resource', names(neurodf_))]) # 7
length(names(neurodf_)[grep('resource', names(neurodf_))]) # 2
length(names(neurodf_)[grep('management', names(neurodf_))]) # 2
length(names(neurodf_)[grep('neuro', names(neurodf_))]) # 24
length(names(neurodf_)[grep('neuroscience', names(neurodf_))]) # 24
length(names(neurodf_)[grep('neuroscience', names(neurodf_))]) # 7
names(neurodf_)[grep('neuroscience', names(neurodf_))]
neurohrmdata <- subset(neurodf_, select = c(grep('human', names(neurodf_)),
grep('resource', names(neurodf_)),
grep('management', names(neurodf_)),
grep('neuroscience', names(neurodf_))))
dim(neurohrmdata)
names(neurohrmdata)
length(names(neurodf_)[grep('recruit', names(neurodf_))]) # 2
names(neurodf_)[grep('recruit', names(neurodf_))]
filepath <- filePath(path, 'neuroscience-applications-in-human-resource-management.csv')
datafile <- importDataFile(filepath)
abs <- makeAbstracts(datafile)
neurodf <- cleanCorpusAndMakeDF(abs, DF=T, sparcity = 0.999)
fit <- CA(neurodf)
library(FactoMineR)
fit <- CA(neurodf)
neurohrmdf <- cleanCorpusAndMakeDF(abs, DF=T, sparcity = 0.999)
fit <- CA(neurohrmdf)
dim(neurohrmdf)
neurohrmdf <- cleanCorpusAndMakeDF(abs, DF=T, sparcity = 0.50)
dim(neurohrmdf)
names(neurohrmdf)
neurohrmdf <- cleanCorpusAndMakeDF(abs, DF=T, sparcity = 0.70)
dim(neurohrmdf)
names(neurohrmdf)
neurohrmdf <- cleanCorpusAndMakeDF(abs, DF=T, sparcity = 0.80)
dim(neurohrmdf)
names(neurohrmdf)
neurohrmdf <- cleanCorpusAndMakeDF(abs, DF=T, sparcity = 0.90)
dim(neurohrmdf)
names(neurohrmdf)
dim(neurohrmdf)
neurohrmdf <- cleanCorpusAndMakeDF(abs, DF=T, sparcity = 0.80)
dim(neurohrmdf)
names(neurohrmdf)
fit <- CA(neurohrmdf)
subset(neurohrmdf, select = -c(also, based, can, high, however, new, one, paper,
provide, related, set, several, study, understanding,
use, used, using, various, way, well, will, within, work ))
neurohrmsub <- subset(neurohrmdf, select = -c(also, based, can, high, however, new, one, paper,
provide, related, set, several, study, understanding,
use, used, using, various, way, well, will, within, work ))
names(neurohrmsub)
length(names(neurohrmsub))
fit <- CA(neurohrmsub)
neurohrmsub <- subset(neurohrmdf, select = -c(also, based, can, high, however, new, one, paper,
provide, related, set, several, study, understanding,
use, used, using, various, way, well, will, within, work, authors ))
names(neurohrmsub)
fit <- CA(neurohrmsub)
neurohrmsub <- subset(neurohrmdf, select = -c(also, based, can, high, however, new, one, paper,
provide, related, set, several, study, understanding, different
use, used, using, various, way, well, will, within, work, authors ))
neurohrmsub <- subset(neurohrmdf, select = -c(also, based, can, high, however, new, one, paper,
provide, related, set, several, study, understanding, different,
use, used, using, various, way, well, will, within, work, authors ))
names(neurohrmsub)
length(names(neurohrmsub))
fit <- CA(neurohrmsub)
getwd()
dspath <- readline()
dspathch <- convertPath(dspath)
dspath <- convertPath() # D:\Research\PAPERS\Neuro\NeuroMarketingPaper\HRM\datasets
getwd()
setwd(dspath)
getwd()
write.csv(neurohrmsub, 'hrm-data.csv')
summary(neurohrmsub)
write.csv(sapply(summary(neurohrmsub), function(x) c(summary(x), class(x))), 'hrm-data-summary.csv')
data.frame(summary(neurohrmsub), function(x) c(summary(x), class(x)))
data.frame(summary(neurohrmsub))
as.matrix(unclass(summary(neurohrmsub)))
as.matrix(summary(neurohrmsub)))
as.matrix(summary(neurohrmsub))
data.frame(as.matrix(summary(neurohrmsub)))
sapply(summary(neurohrmsub), function(x) c(summary(x), class(x)))
data.frame(sapply(summary(neurohrmsub), function(x) c(summary(x), class(x))))
as.matrix(sapply(summary(neurohrmsub), function(x) c(summary(x), class(x))))
write.csv(sapply(summary(neurohrmsub), function(x) c(summary(x), class(x))), 'hrm-data-summary.csv')
write.csv(sapply(neurohrmsub, function(x) c(summary(x), class(x))), 'hrm-data-summary.csv')
write.csv(sapply(neurohrmsub, function(x) c(summary(x), sd(x), class(x))), 'hrm-data-summary.csv')
plot.CA(fit, xlim = c(-3, 0), ylim = c(-2.5, 0))
plot.CA(fit, xlim = c(0, -2), ylim = c(-3, 0)) # q1 0-1
plot.CA(fit, xlim = c(0, 2), ylim = c(-3, 0)) # q1 0-1
plot.CA(fit, xlim = c(0, 2), ylim = c(-0.5, 0)) # q1 01-2
plot.CA(fit, xlim = c(0, 1), ylim = c(-0.5, 0)) # q1 01-2
plot.CA(fit, xlim = c(0, 0.75), ylim = c(-0.5, 0)) # q1 01-2
plot.CA(fit, xlim = c(0, 1), ylim = c(0, 0.5)) # q2 01-2
plot.CA(fit, xlim = c(0, 0.25), ylim = c(0, 0.3)) # q3 11-2
plot.CA(fit, xlim = c(-0.5, 0), ylim = c(0, 0.5)) # q4 10-2
plot.CA(fit, xlim = c(-0.5, 0), ylim = c(0, 0.5)) # q1 00
plot.CA(fit, xlim = c(-0.5, 0), ylim = c(-0.5, 0)) # q1 00
fit$eig
write.csv(fit$eig, 'CA-fit-neuro-hrm-df.csv')
eigvals <- fit$eig
barplot(eigvals[, 2],
names.arg = 1:nrow(eigvals),
main = "Variances Explained by Dimensions (%)",
xlab = "Principal Dimensions",
ylab = "Percentage of variances",
col ="steelblue")
# Add connected line segments to the plot
lines(x = 1:nrow(eigvals), eigvals[, 2],
type = "b", pch = 19, col = "red")
fit$row$contrib
write.csv(fit$row$contrib, 'CA-row-contributions.csv')
write.csv(fit$col$contrib, 'CA-col-contributions.csv')
fit$col$contrib
row_contribs <- data.frame(fit$row$contrib)
names(row_contribs)
rownames(row_contribs)
names(row_contribs)
plot(row_contribs$Dim.1, row_contribs$Dim.2); text(row_contribs$Dim.1, row_contribs$Dim.2, labels = names(neurohrmsub))
plot(row_contribs$Dim.1, row_contribs$Dim.2, xlim = c(0, 10)); text(row_contribs$Dim.1, row_contribs$Dim.2, labels = names(neurohrmsub))
plot(row_contribs$Dim.1, row_contribs$Dim.2, xlim = c(0, 10), ylim = c(0, 10)); text(row_contribs$Dim.1, row_contribs$Dim.2, labels = names(neurohrmsub))
plot(row_contribs$Dim.1, row_contribs$Dim.2, xlim = c(0, 7), ylim = c(0, 4)); text(row_contribs$Dim.1, row_contribs$Dim.2, labels = names(neurohrmsub))
plot(row_contribs$Dim.1, row_contribs$Dim.2, xlim = c(0, 1), ylim = c(0, 1)); text(row_contribs$Dim.1, row_contribs$Dim.2, labels = names(neurohrmsub))
plot(row_contribs$Dim.1, row_contribs$Dim.2, xlim = c(0, 1), ylim = c(0, 1)); text(row_contribs$Dim.1, row_contribs$Dim.2, labels = names(neurohrmsub), pos = 2)
plot(row_contribs$Dim.1, row_contribs$Dim.2, xlim = c(0, 1), ylim = c(0, 1)); text(row_contribs$Dim.1, row_contribs$Dim.2, labels = names(neurohrmsub), pos = 4)
plot(row_contribs$Dim.1, row_contribs$Dim.2, xlim = c(0, 1), ylim = c(0, 1), pch = 22, col = red); text(row_contribs$Dim.1, row_contribs$Dim.2, labels = names(neurohrmsub), pos = 4)
plot(row_contribs$Dim.1, row_contribs$Dim.2, xlim = c(0, 1), ylim = c(0, 1), pch = 22, col = 'red'); text(row_contribs$Dim.1, row_contribs$Dim.2, labels = names(neurohrmsub), pos = 4)
plot(row_contribs$Dim.1, row_contribs$Dim.2, xlim = c(0, 1), ylim = c(0, 1), pch = 19, col = 'red'); text(row_contribs$Dim.1, row_contribs$Dim.2, labels = names(neurohrmsub), pos = 4)
plot(row_contribs$Dim.1, row_contribs$Dim.2, xlim = c(0, 1), ylim = c(0, 1), pch = 19, col = 'red'); text(row_contribs$Dim.1, row_contribs$Dim.2, labels = names(neurohrmsub), pos = 4, col = 'blue')
plot(col_contribs$Dim.1, col_contribs$Dim.2, xlim = c(0, 1), ylim = c(0, 1), pch = 19, col = 'red'); text(col_contribs$Dim.1, col_contribs$Dim.2, labels = names(neurohrmsub), pos = 4, col = 'blue')
col_contribs <- data.frame(fit$col$contrib)
names(col_contribs)
names(col_contribs)
plot(col_contribs$Dim.1, col_contribs$Dim.2, xlim = c(0, 1), ylim = c(0, 1), pch = 19, col = 'red'); text(col_contribs$Dim.1, col_contribs$Dim.2, labels = names(neurohrmsub), pos = 4, col = 'blue')
